{
  "openapi": "3.0.1",
  "info": {
    "version": "2.0.0",
    "title": "Pro test API",
    "description": "Team project group 10.Application endpoints description"
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [
    { "url": "https://protest-api.herokuapp.com/" },
    { "url": "http://localhost:3000" }
  ],
  "tags": [
    {
      "name": "User",
      "description": "Authorization endpoints"
    },
    {
      "name": "Tests",
      "description": "Technical and Theoretical  tests endpoint"
    }
  ],
  "paths": {
    "/api/users/register": {
      "post": {
        "tags": ["User"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Provided email already exists",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/users/login": {
      "post": {
        "tags": ["User"],
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "description": "Login's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "403": {
            "description": "Email or password is wrong",
            "content": {}
          }
        }
      }
    },
    "/api/users/logout": {
      "post": {
        "tags": ["User"],
        "summary": "Logout",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {}
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      }
    },
    "/api/users/current": {
      "get": {
        "tags": ["User"],
        "summary": "Get current user information",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },
    "/api/users/google": {
      "get": {
        "tags": ["User"],
        "summary": "Google authentication. WARNING: Works only for sign-in, after registered on front-end (if you're writing your back-end for a SPECIFIC front-end, then you can configure it right to work both for sign-up & sign-in)",
        "responses": {
          "200": {
            "description": "Successful operation (redirect to front-end with accessToken, refreshToken and sid in query). Then use GET /user",
            "content": {}
          },
          "403": {
            "description": "Not registered or registered with postman",
            "content": {}
          }
        }
      }
    },
    "/qa-test/tech": {
      "get": {
        "tags": ["Tests"],
        "summary": "Get  tech test of 12 random questions",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QATech"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          }
        }
      }
    },
    "/qa-test/theory": {
      "get": {
        "tags": ["Tests"],
        "summary": "Get  theory test of 12 random questions",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QATheory"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          }
        }
      }
    },
    "/qa-test/tech-results": {
      "post": {
        "tags": ["Tests"],
        "summary": "technical test result",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QATechResultsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          }
        }
      }
    },
    "/qa-test/theory-results": {
      "post": {
        "tags": ["Tests"],
        "summary": "theoretical test result",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QATheoryResultsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "required": ["email", "password"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "123qwerty"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "id": {
            "type": "string",
            "description": "User's id",
            "example": "606849d2cff14956ef33b043"
          }
        }
      },
      "LoginRequest": {
        "required": ["email", "password"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "123qwerty"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Access token after success login",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjE3MzYzMTIzLCJleHAiOjE2NDg4OTkxMjN9.GYGPRZl0d04e41W4mJSyeS1I5zvfTU-Dz2rMONAFM3U"
          },
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "description": "User's email",
              "format": "email"
            },
            "id": {
              "type": "string",
              "description": "User's id",
              "example": "507f1f77bcf86cd799439012"
            }
          }
        }
      },
      "QATech": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_.id": {
              "type": "string"
            },
            "question": {
              "type": "string",
              "description": "Question tech"
            },
            "questionId": {
              "type": "integer",
              "description": "Question's id"
            },
            "answers": {
              "type": "array",
              "description": "Answers for tech question",
              "items": {
                "type": "string",
                "description": "Answer options"
              }
            }
          }
        },
        "example": [
          {
            "_id": "6068487ae4ff5c162cc740c8",
            "question": "What skills are most often required from a project manager?",
            "questionId": 10,
            "answers": [
              "Collection and systematization of project requirements",
              "Work execution plan, KPI, mindmaps",
              "Search for performers, freelancers, drawing up a portrait of the desired employee for HR",
              "Setting tasks and monitoring deadlines",
              "All options are correct",
              "All options are incorrect"
            ],
            "rightAnswer": "All options are correct"
          }
        ]
      },
      "QATheory": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_.id": {
              "type": "string"
            },
            "question": {
              "type": "string",
              "description": "Question theory"
            },
            "questionId": {
              "type": "integer",
              "description": "Question's id"
            },
            "answers": {
              "type": "array",
              "description": "Answers for theory question",
              "items": {
                "type": "string",
                "description": "Answer options"
              }
            }
          }
        },
        "example": [
          {
            "_id": "6068498ae4ff5c162cc740ec",
            "question": "What kind of testing allows a tester to evaluate the software's behavior when exceptions are thrown?",
            "questionId": 20,
            "answers": [
              "Injection test malfunction",
              "Passive testing",
              "Fuzzy testing",
              "Centiliter",
              "All options are correct",
              "All options are incorrent"
            ],
            "rightAnswer": "Injection test malfunction"
          }
        ]
      },
      "QATechResultsRequest": {
        "type": "object",
        "properties": {
          "answers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "questionId": {
                  "type": "integer",
                  "description": "Tech question's id"
                },
                "answer": {
                  "type": "string",
                  "description": "Answer to the tech question"
                }
              }
            }
          }
        },
        "example": {
          "answers": [
            {
              "questionId": 1,
              "answer": "7"
            }
          ]
        }
      },
      "QATheoryResultsRequest": {
        "type": "object",
        "properties": {
          "answers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "questionId": {
                  "type": "integer",
                  "description": "Theory question's id"
                },
                "answer": {
                  "type": "string",
                  "description": "Answer to the theory question"
                }
              }
            }
          }
        },
        "example": {
          "answers": [
            {
              "questionId": 1,
              "answer": "Continuous Integration"
            }
          ]
        }
      },
      "TestResult": {
        "type": "object",
        "properties": {
          "rightAnswers": {
            "type": "integer",
            "description": "number of correct answers in the test",
            "example": 7
          },
          "wrongAnswers": {
            "type": "integer",
            "description": "number of incorrect answers in the test",
            "example": 5
          }
        }
      },
      "GetUserInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User's id",
            "example": "507f1f77bcf86cd799439012"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "exampl@email.com"
          },
          "name": {
            "type": "string",
            "description": "User's name"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
